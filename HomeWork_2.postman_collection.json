{
	"info": {
		"_postman_id": "86b4b3f1-6f3e-4dd9-adb6-434284394b65",
		"name": "HomeWork_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20593123"
	},
	"item": [
		{
			"name": "1. first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('This is the first responce from server!ss');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"pm.test(\"Person is Dmitriy\", () => {\r",
							"  pm.expect(jsonData.name).to.eql(\"Dmitriy\");\r",
							"  });\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"pm.test(\"Person's age is 32 years\", () => {\r",
							"  pm.expect(jsonData.age).to.eql('32');\r",
							"  });\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"pm.test(\"Salary is 700$\", () => {\r",
							"  pm.expect(jsonData.salary).to.eql(700);\r",
							"  });\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"Person is Dmitriy\", function () {\r",
							"       pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"Person's age is 32 years\", function () {\r",
							"       pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"pm.test(\"Salary is 700 $\", function () {\r",
							"       pm.expect(jsonData.salary).to.eql(Number(reqData.salary));\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req_salary_1_5_year = reqData.salary * 4;\r",
							"pm.test(\"u_salary_1_5_year = salary*4 \", function () {\r",
							"       pm.expect(req_salary_1_5_year).to.eql(2800);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitriy",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"Person is Dmitriy\", () => {\r",
							"  pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"  });\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"Person's age is 32 years\", () => {\r",
							"  pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"  });\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"pm.test(\"Salary is 700$\", () => {\r",
							"  pm.expect(jsonData.salary).to.eql(Number(reqData.salary));\r",
							"  });\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"'dog' includes 'name'\", function () {\r",
							"      pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"'dog' includes 'age'\", function () {\r",
							"      pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name = Luky\", function () {\r",
							"       pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"age = 4\", function () {\r",
							"       pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Dmitriy&age=32&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitriy"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4. object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"Person is Dmitriy\", () => {\r",
							"  pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"  });\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Person's age is 32 years\", () => {\r",
							"  pm.expect(jsonData.age).to.eql(Number(reqData.age));\r",
							"  });\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response. \r",
							"console.log(jsonData.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary[0] = salary \", function () {\r",
							"       pm.expect(jsonData.salary[0]).to.eql(Number(reqData.salary));\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary[1] = salary*2 \", function () {\r",
							"       pm.expect(Number(jsonData.salary[1])).to.eql(Number(reqData.salary)*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary[2] = salary*3 \", function () {\r",
							"       pm.expect(Number(jsonData.salary[2])).to.eql(Number(reqData.salary)*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Tatiana\");\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"// 19. Передать в окружение переменную age\r",
							" pm.environment.set(\"age\", \"34\");\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 20. Передать в окружение переменную salary\r",
							" pm.environment.set(\"salary\", \"1000\");\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"pm.test(\"list items from parameter 'salary'\", function () {\r",
							"jsonData.salary.forEach (element => {console.log(element);});\r",
							"});\r",
							"\r",
							"// цикл через for\r",
							"// pm.test(\"цикл\", function () {\r",
							"//     let salaryList =  jsonData.salary;\r",
							"//         for (let i = 0; i < salaryList.length; i++) \r",
							"//         break;\r",
							"//   console.log(jsonData.salary);\r",
							"//   })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Dmitriy&age=32&salary=700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitriy"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5. user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"pm.variables.get(\"salary\");\r",
							"\r",
							"// 2. Вставить параметр age из окружения в request\r",
							"pm.variables.get(\"age\");\r",
							"\r",
							"// 3. Вставить параметр name из окружения в request\r",
							"pm.variables.get(\"name\");\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"response include 'start_qa_salary' \", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"response include 'qa_salary_after_6_months' \", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"response include 'qa_salary_after_12_months' \", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response include 'qa_salary_after_1.5_year' \", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"response include 'qa_salary_after_3.5_years' \", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"response include 'person' \", function () {\r",
							"    pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = salary \", function () {\r",
							"       pm.expect(jsonData.start_qa_salary).to.eql(Number(reqData.salary));\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 \", function () {\r",
							"       pm.expect(jsonData.qa_salary_after_6_months).to.eql(Number(reqData.salary)*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2,7 \", function () {\r",
							"       pm.expect(jsonData.qa_salary_after_12_months).to.eql(Number(reqData.salary)*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3,3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 \", function () {\r",
							"       pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(Number(reqData.salary)*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.3 \", function () {\r",
							"       pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(Number(reqData.salary)*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person[0] = salary \", function () {\r",
							"       pm.expect(jsonData.person[0]).to.eql(reqData.person);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age = age\", function () {\r",
							"       pm.expect(Number(jsonData.person[0])).to.eql(Number(reqData.u_age));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary*4.2\", function () {\r",
							"       pm.expect(Number(jsonData.person.u_salary_5_years)).to.eql(Number(reqData.salary)*4.2);\r",
							"});\r",
							"\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (let element in jsonData.person){\r",
							"       pm.test(\"list items from parameter 'person'\" , function () {\r",
							"      console.log(element)\r",
							"   });\r",
							"   }\r",
							"\r",
							"// через цикл for\r",
							"// pm.test(\"цикл\", function () {\r",
							"//     let personList =  jsonData.person;\r",
							"//         for (let i = 0; i < personList.length; i++) \r",
							"//         break;\r",
							"//   console.log(jsonData.person);\r",
							"//   })\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}